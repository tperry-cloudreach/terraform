# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# this is being defined in app-ci pipeline
resources:
  pipelines:
  - pipeline: terraform-cd   # Name of the pipeline resource
    source: terraform-ci # Name of the pipeline referenced by the pipeline resource
    trigger: true # Run terraform-cd pipeline when any run of terraform-ci pipeline completes

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'terraform-basic-testing-azure-connection'
  azureLocation: 'uksouth'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/samples/integration-testing/src'
  terraformVersion: '1.0.4'

stages:
  - stage: TerraformContinuousDeployment
    displayName: Terraform Module - CD
    jobs:
    - job: TerraformContinuousDeploymentJob
      displayName: TerraformContinuousDeployment - CD Job
      pool:
        vmImage: ubuntu-20.04
      steps:
      # Step 1: install Terraform on the Azure Pipelines agent
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 3: run Terraform init to initialize the workspace
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform init'
        env: {
          ARM_CLIENT_ID: $(ARM_CLIENT_ID),
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET),
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID),
          ARM_TENANT_ID: $(ARM_TENANT_ID)
        }
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
      # Step 4: run Terraform validate to validate HCL syntax
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform validate'
        env: {
          ARM_CLIENT_ID: $(ARM_CLIENT_ID),
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET),
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID),
          ARM_TENANT_ID: $(ARM_TENANT_ID)
        }
        inputs:
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
      # Step 5: run Terraform plan to validate HCL syntax
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform apply'
        env: {
          ARM_CLIENT_ID: $(ARM_CLIENT_ID),
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET),
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID),
          ARM_TENANT_ID: $(ARM_TENANT_ID)
        }
        inputs:
          command: apply
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          commandOptions: -var location=$(azureLocation)
          
